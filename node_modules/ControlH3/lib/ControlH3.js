'use strict';

var User = require('./user/user');
var Schedule = require('./schedule/schedule');
var Agenda =  require('./agenda/agenda');
var utilities = require('./utilities');

function ControlH3 (){

}

ControlH3.prototype.signIn = function(name, password, date, mac, callback) {
	var user = {
		name : name, 
		password : password
	};

	User.getUserByNameAndPassword(user, function(err, userResult){
		if(err){
			return callback(err, null);
		}
		else
		{
			if (userResult == null) {
				callback("Invalid login name or password", null);
			}else if(!userResult.logged){
				var type = (!mac)?'house':'office';				
				var schedule = {
					idUser : userResult._id,
					type : type,
					year : date.getFullYear(),
					month : date.getMonth() + 1,
					input : date	
				};

				Schedule.addSchedule(schedule, function(err, schedule){
					if(err){
						return callback(err, null);
					}
					else
					{
						userResult.logged = true;
						userResult.state = type;
						userResult.save();
						return callback(null,schedule);
					}
				});		
				
			}else{
				return callback("User already logged", null);			
			}
		}	
	});
};


ControlH3.prototype.signOut = function(name, password, date, mac, labored, callback) {
	var user = {
		name : name, 
		password : password
	};

	User.getUserByNameAndPassword(user, function(err, userResult){
		if(err){
			return callback(err, null);
		}
		else
		{
			if (!userResult) {
				callback("Invalid login name or password", null);
			}else if(userResult.logged){
				var type = (!mac)?'house':'office';
				if(userResult.state == type){					
					var schedule = {
						idUser : userResult._id,
						output : date,
	   					labored : labored,
	   					finalised : true
					};
					Schedule.finalisedSchedule(schedule, function(error, schedule){
						if(error){
							return callback(error, null);
						}else{
							userResult.logged = false;
							userResult.state = 'out';
							userResult.save();
							return callback(null, schedule);
						}					
					});
					
				}
				else
				{
					return callback("marque salida desde la oficina o por internet "
						+"al igual que marco entrada");
				}
			}
			else
			{
				return callback("Ud no se encuentra logged");
			}
		}
	});
};

ControlH3.prototype.passwordChange= function(form,callback){
	User.changePassword(form,function(err,result){
		if(err){
			callback(err, null);
		}else{			
			if(!result){
				callback("User wasn't found",null);
			}	
			else{
				callback(null,result);
			}
		}
	});
};

ControlH3.prototype.signUp = function(user, callback) {
	User.addUser(user, function(err, result){
		if(err){
			callback(err, null);
		}else{
			callback(null, result);
		}
	});
};

ControlH3.prototype.deleteAccount = function(){

};

ControlH3.prototype.workingNow = function(callback){
	User.getUsersLoggedOn(function(err, result){
		if(err){
			callback(err, null);
		}else{
			callback(null, result);
		}
	});
};

ControlH3.prototype.hi= function(callback){
	console.log("hi, good day!!!");
	utilities.getHora(callback);
};

ControlH3.prototype.addSchedule= function(agenda,callback){
	Agenda.addAgenda(agenda,function(err,result){
		if(err){
			callback(err, null);
		}else{
			callback(null, result);
		}
	});
};

ControlH3.prototype.getSchedulesByUser= function(user,callback){
	Agenda.getAgendasByIdUser(user,function(err,result){
		if(err){
			callback(err,null);
		}else{
			callback(null,result);
		}
	});

};

ControlH3.prototype.getAllSchedules = function(callback){
	Agenda.getAgendasUsers(function(err,result){
		if(err){
			callback(err,null);
		}else{
			callback(null,result);
		}
	});
};

ControlH3.prototype.getTotalHours = function(info, callback){
	var query = {
		idUser  : info.idUser,
		year  : info.year,
		month  : info.month,
		finalised : true
	}

	Schedule.getHoursByQuery(query, info.day, function(err,result){
		if(err){
			callback(err,null);
		}else{
			callback(null,result);
		}
	});
};

ControlH3.prototype.getHoursInDateRange = function (info, callback){
	var query = {
		input: {
			$gte : new Date(info.initDate),
			$lt  : new Date(info.finalDate)  
		},
		idUser: info.idUser,
		finalised: true
	}

	Schedule.getHoursByQuery(query, null, function (err, hours){		
		if(err){
			return callback(err, null);
		}
		else{
			User.getUserByQuery({_id: info.idUser}, function (err, user){
				if(err){
					return callback(err, null);			
				}
				else if(user == null){
					return callback(null, {err: "The user does not exist"});
				}
				else{
					return callback(null, {user: user.name, horas: hours});
				}
			});
		}
	});
}

var controlh3 = module.exports = exports = new ControlH3;